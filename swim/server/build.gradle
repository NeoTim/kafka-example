import java.util.regex.Matcher

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'application'
idea.module.outputDir file("out/production/classes")

group = 'ai.swim'
description = 'Sat Tracker'
ext.moduleName = 'swim.sattrack'
sourceCompatibility = JavaVersion.VERSION_1_8
version = project.property('application.version')
mainClassName = 'swim.sattrack.ApplicationPlane'

def jvmVersion = System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = false;

repositories {
  mavenCentral()
  maven { url 'https://swimos.bintray.com/maven/' }
  maven { url 'https://packages.confluent.io/maven/' }

}

dependencies {
  api group: 'org.swimos', name: 'swim-server', version: version
  api group: 'org.swimos', name: 'swim-client', version: version
  implementation group: 'org.swimos', name: 'swim-xml', version: version
  implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.0'
  implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.5.0'  
  implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
}

afterEvaluate {
  compileJava {
    if (useModules) {
      doFirst {
        options.compilerArgs += [
          '--module-path', classpath.asPath,
        ]
        classpath = files()
      }
    }
    options.compilerArgs += ['-Xlint:-deprecation']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
        'Implementation-Title': moduleName,
        'Implementation-Version': version,
        'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (!useModules) {
      exclude '*module-info*'
    }
  }

  run {
    dependsOn jar
    // doFirst {
    //   jvmArgs += [
    //     '--module-path', files(configurations.runtimeClasspath, jar.archiveFile).asPath,
    //     '--module', "${moduleName}/${mainClassName}"
    //   ]
    //   classpath = files()
    // }
  }

  startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
      classpath = files()
      defaultJvmOpts = [
        '-Dswim.config=/server.recon',
        '--module-path', 'APP_HOME_LIBS',
        '--module', "${moduleName}/${mainClassName}"
      ]
    }
    doLast {
      def bashFile = new File(outputDir, applicationName)
      String bashContent = bashFile.text
      bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

      def batFile = new File(outputDir, applicationName + ".bat")
      String batContent = batFile.text
      batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
  }

}
